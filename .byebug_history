continue
CONTINUE
topic_params[:proposals_attributes].any? { |(k, p)| p[:content].each_line.count > 100 }
topic_params[:proposals_attributes].any? { |(k, p)| puts p[:content].each_line.count > 100 }
topic_params[:proposals_attributes].any? { |(k, p)| puts p[:content].each_line.count.inspect }
topic_params[:proposals_attributes].any? { |(k, p)| puts p[:content].size.inspect }
topic_params[:proposals_attributes].any? { |(k, p)| puts p[:content].inspect }
topic_params[:proposals_attributes].any? { |(k, p)| puts p[:content].each_line.size.inspect }
topic_params[:proposals_attributes].any? { |(k, p)| puts p[:content].each_line.size }
topic_params[:proposals_attributes].any? { |(k, p)| puts p[:content].each_line }
topic_params[:proposals_attributes].any? { |(k, p)| p[:content].each_line }
topic_params[:proposals_attributes].any? { |(k, p)| p[:content].each_line.size > 100 }
topic_params[:proposals_attributes].any? { |(k, p)| p[:content].each_line.size }
topic_params[:proposals_attributes].
topic_params[:proposals_attributes].class
topic_params[:proposals_attributes]
topic_params[:proposals_attributes].any? { |p| p }
topic_params[:proposals_attributes].any? { |p| p[:content].each_line.size }
topic_params[:proposals_attributes].any? { |p| p[:content].each_line.size > 100 }
exit
params[:topic][:txt_file].to_io.each_line.with_index
params[:topic][:txt_file].to_io.each_line.with_index.first
params[:topic][:txt_file].to_io.each_line.with_index
params[:topic][:txt_file].to_io.each_line.with_index.class
params[:topic][:txt_file].to_io.each_line.with_index { |l, i| puts [l, i].inspect }
params[:topic][:txt_file].to_io.each_line.to_a.size
params[:topic][:txt_file].to_io
params[:topic][:txt_file].class
params[:topic][:txt_file].each_line.to_a.size
params[:topic][:txt_file]
params[:topic]
params
